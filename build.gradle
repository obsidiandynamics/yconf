plugins {
  id "com.jfrog.bintray" version "1.8.4"
  id "com.github.ben-manes.versions" version "0.22.0"
}
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"

group = "com.obsidiandynamics.yconf"
version = "0.20.0"
  
def envUser = "BINTRAY_USER"
def envKey = "BINTRAY_KEY"
task bintrayCredentialsCheck {
  doLast {
    if (System.getenv(envUser) == null) {
      throw new GradleException("No Bintray username specified; set with 'export ${envUser}=<username>'")
    }
    if (System.getenv(envKey) == null) {
      throw new GradleException("No Bintray key specified; set with 'export ${envKey}=<key>'")
    }
  }
}

def baseJvmArgs = [
  "--illegal-access=warn",
  "--add-opens=java.base/java.io=ALL-UNNAMED",
  "--add-opens=java.base/java.lang=ALL-UNNAMED",
  "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
  "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
  "--add-opens=java.base/java.nio=ALL-UNNAMED",
  "--add-opens=java.base/java.util=ALL-UNNAMED",
  "--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED",
  "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
  "-XX:-MaxFDLimit"
]
project.ext.set("baseJvmArgs", baseJvmArgs)

allprojects {
  apply plugin: "java"
  apply plugin: "jacoco"
  apply plugin: "maven-publish"
  apply plugin: "com.jfrog.bintray"
  
  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories {
    jcenter()
  }
  
  ext {
    fulcrumVersion = "0.36.0"
    gsonVersion = "2.8.5"
    juelVersion = "2.2.7"
    junitVersion = "4.12"
    mockitoVersion = "3.0.0"
    snakeyamlVersion = "1.25"
  }
  
  dependencies {
    testCompile "com.obsidiandynamics.fulcrum:fulcrum-assert:${fulcrumVersion}"
    testCompile "junit:junit:${junitVersion}"
    testCompile "org.mockito:mockito-core:${mockitoVersion}"
  }
  
  compileJava {
    options.compilerArgs += "-proc:none"
    options.compilerArgs += "-Xlint:unchecked"
  }

  compileTestJava {
    options.compilerArgs += "-proc:none"
    options.compilerArgs += "-Xlint:unchecked"
  }
  
  tasks.withType(JavaCompile) {
    options.fork = true
    options.incremental = true
  }

  test {
    exclude "**/*IT.class"
    jvmArgs += baseJvmArgs
  }

  jacoco {
    toolVersion = "0.8.4"
  }
  
  jacocoTestReport {
    additionalSourceDirs.from = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(sourceSets.main.output)
    reports {
      html.enabled true
      xml.enabled true
      csv.enabled false
    }
  }
  
  // invoke this task when ready to publish to Bintray
  bintrayUpload {
    dependsOn ":bintrayCredentialsCheck"
    dependsOn "jar"
    dependsOn "sourcesJar"
    dependsOn "javadocJar"
    dependsOn "generatePomFileForMavenJavaPublication"
  }
}

subprojects {}

task jacocoMerge(type: JacocoMerge) {
  mustRunAfter = allprojects.test
  executionData = files(allprojects.jacocoTestReport.executionData)
  doFirst {
    executionData = files(files(allprojects.jacocoTestReport.executionData).findAll { it.exists() })
  }
}

task jacocoRootReport(type: JacocoReport) {
  dependsOn jacocoMerge
  mustRunAfter = allprojects.test
  additionalSourceDirs.from = files(allprojects.sourceSets.main.allSource.srcDirs)
  sourceDirectories.from = files(allprojects.sourceSets.main.allSource.srcDirs)
  classDirectories.from = files(allprojects.sourceSets.main.output)
  executionData jacocoMerge.destinationFile
  reports {
    html.enabled true
    xml.enabled true
    csv.enabled false
  }
  onlyIf = {
    true
  }
}

def packageName = "yconf-core"

dependencies {
}

jar {
  baseName packageName
  finalizedBy jacocoRootReport
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  baseName packageName
  classifier = "javadoc"
  from "$buildDir/docs/javadoc"
}
 
task sourcesJar(type: Jar) {
  baseName packageName
  from sourceSets.main.allSource
  classifier = "sources"
}
 
artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId project(":").group
      artifactId packageName
      version project(":").version
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
  repositories {
    maven {
      url "${project(':').projectDir}/../repo"
    }
  }
}


def packageDesc = "Simple, elegant configuration"
def repoName = "yconf"
bintray {
  user = System.getenv(envUser)
  key = System.getenv(envKey)
  publications = ["mavenJava"]
  pkg {
    repo = "${repoName}"
    name = packageName
    userOrg = "obsidiandynamics"
    desc = packageDesc
    websiteUrl = "https://github.com/obsidiandynamics/${repoName}"
    licenses = ["BSD New"]
    vcsUrl = "https://github.com/obsidiandynamics/${repoName}"
    issueTrackerUrl = "https://github.com/obsidiandynamics/${repoName}/issues"
    publicDownloadNumbers = true
    githubRepo = "obsidiandynamics/${repoName}"
    override = true
    publish = true
    version {
      name = project(":").version
      desc = packageDesc
      released  = new Date()
      vcsTag = project(":").version
    }
  }
}
